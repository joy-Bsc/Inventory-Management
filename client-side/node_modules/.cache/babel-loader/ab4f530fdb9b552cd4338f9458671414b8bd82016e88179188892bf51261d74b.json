{"ast":null,"code":"import { GetProductList } from '../APIRequest/APIRequest';\n\n// Action types\nexport const SET_ALL_PRODUCT = 'SET_ALL_PRODUCT';\nexport const FETCH_PRODUCT_LIST_REQUEST = 'FETCH_PRODUCT_LIST_REQUEST';\nexport const FETCH_PRODUCT_LIST_SUCCESS = 'FETCH_PRODUCT_LIST_SUCCESS';\nexport const FETCH_PRODUCT_LIST_FAILURE = 'FETCH_PRODUCT_LIST_FAILURE';\n\n// Action creators\nexport const setAllProduct = (products, total) => ({\n  type: SET_ALL_PRODUCT,\n  payload: {\n    products,\n    total\n  }\n});\nexport const fetchProductListRequest = () => ({\n  type: FETCH_PRODUCT_LIST_REQUEST\n});\nexport const fetchProductListSuccess = (products, total) => ({\n  type: FETCH_PRODUCT_LIST_SUCCESS,\n  payload: {\n    products,\n    total\n  }\n});\nexport const fetchProductListFailure = error => ({\n  type: FETCH_PRODUCT_LIST_FAILURE,\n  payload: {\n    error\n  }\n});\n\n// Thunk action creator for fetching product list\nexport const fetchProductList = (pageNo, perPage, searchKeyword) => {\n  return async dispatch => {\n    dispatch(fetchProductListRequest()); // Dispatch action to indicate start of fetching\n\n    try {\n      // Call API to fetch product list\n      const response = await GetProductList(pageNo, perPage, searchKeyword);\n      const {\n        data\n      } = response;\n\n      // Dispatch success action with fetched data\n      dispatch(fetchProductListSuccess(data.Rows, data.Total[0].count));\n    } catch (error) {\n      // Dispatch failure action if fetching fails\n      dispatch(fetchProductListFailure(error));\n      console.error('Error fetching product list:', error);\n      // Handle error if needed\n    }\n  };\n};","map":{"version":3,"names":["GetProductList","SET_ALL_PRODUCT","FETCH_PRODUCT_LIST_REQUEST","FETCH_PRODUCT_LIST_SUCCESS","FETCH_PRODUCT_LIST_FAILURE","setAllProduct","products","total","type","payload","fetchProductListRequest","fetchProductListSuccess","fetchProductListFailure","error","fetchProductList","pageNo","perPage","searchKeyword","dispatch","response","data","Rows","Total","count","console"],"sources":["H:/My prac/BusinessTable/client-side/src/redux/actions/productActions.js"],"sourcesContent":["import { GetProductList } from '../APIRequest/APIRequest';\r\n\r\n// Action types\r\nexport const SET_ALL_PRODUCT = 'SET_ALL_PRODUCT';\r\nexport const FETCH_PRODUCT_LIST_REQUEST = 'FETCH_PRODUCT_LIST_REQUEST';\r\nexport const FETCH_PRODUCT_LIST_SUCCESS = 'FETCH_PRODUCT_LIST_SUCCESS';\r\nexport const FETCH_PRODUCT_LIST_FAILURE = 'FETCH_PRODUCT_LIST_FAILURE';\r\n\r\n// Action creators\r\nexport const setAllProduct = (products, total) => ({\r\n  type: SET_ALL_PRODUCT,\r\n  payload: { products, total },\r\n});\r\n\r\nexport const fetchProductListRequest = () => ({\r\n  type: FETCH_PRODUCT_LIST_REQUEST,\r\n});\r\n\r\nexport const fetchProductListSuccess = (products, total) => ({\r\n  type: FETCH_PRODUCT_LIST_SUCCESS,\r\n  payload: { products, total },\r\n});\r\n\r\nexport const fetchProductListFailure = (error) => ({\r\n  type: FETCH_PRODUCT_LIST_FAILURE,\r\n  payload: { error },\r\n});\r\n\r\n// Thunk action creator for fetching product list\r\nexport const fetchProductList = (pageNo, perPage, searchKeyword) => {\r\n  return async (dispatch) => {\r\n    dispatch(fetchProductListRequest()); // Dispatch action to indicate start of fetching\r\n\r\n    try {\r\n      // Call API to fetch product list\r\n      const response = await GetProductList(pageNo, perPage, searchKeyword);\r\n      const { data } = response;\r\n\r\n      // Dispatch success action with fetched data\r\n      dispatch(fetchProductListSuccess(data.Rows, data.Total[0].count));\r\n    } catch (error) {\r\n      // Dispatch failure action if fetching fails\r\n      dispatch(fetchProductListFailure(error));\r\n      console.error('Error fetching product list:', error);\r\n      // Handle error if needed\r\n    }\r\n  };\r\n};\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,0BAA0B;;AAEzD;AACA,OAAO,MAAMC,eAAe,GAAG,iBAAiB;AAChD,OAAO,MAAMC,0BAA0B,GAAG,4BAA4B;AACtE,OAAO,MAAMC,0BAA0B,GAAG,4BAA4B;AACtE,OAAO,MAAMC,0BAA0B,GAAG,4BAA4B;;AAEtE;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,QAAQ,EAAEC,KAAK,MAAM;EACjDC,IAAI,EAAEP,eAAe;EACrBQ,OAAO,EAAE;IAAEH,QAAQ;IAAEC;EAAM;AAC7B,CAAC,CAAC;AAEF,OAAO,MAAMG,uBAAuB,GAAGA,CAAA,MAAO;EAC5CF,IAAI,EAAEN;AACR,CAAC,CAAC;AAEF,OAAO,MAAMS,uBAAuB,GAAGA,CAACL,QAAQ,EAAEC,KAAK,MAAM;EAC3DC,IAAI,EAAEL,0BAA0B;EAChCM,OAAO,EAAE;IAAEH,QAAQ;IAAEC;EAAM;AAC7B,CAAC,CAAC;AAEF,OAAO,MAAMK,uBAAuB,GAAIC,KAAK,KAAM;EACjDL,IAAI,EAAEJ,0BAA0B;EAChCK,OAAO,EAAE;IAAEI;EAAM;AACnB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,MAAM,EAAEC,OAAO,EAAEC,aAAa,KAAK;EAClE,OAAO,MAAOC,QAAQ,IAAK;IACzBA,QAAQ,CAACR,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;;IAErC,IAAI;MACF;MACA,MAAMS,QAAQ,GAAG,MAAMnB,cAAc,CAACe,MAAM,EAAEC,OAAO,EAAEC,aAAa,CAAC;MACrE,MAAM;QAAEG;MAAK,CAAC,GAAGD,QAAQ;;MAEzB;MACAD,QAAQ,CAACP,uBAAuB,CAACS,IAAI,CAACC,IAAI,EAAED,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;IACnE,CAAC,CAAC,OAAOV,KAAK,EAAE;MACd;MACAK,QAAQ,CAACN,uBAAuB,CAACC,KAAK,CAAC,CAAC;MACxCW,OAAO,CAACX,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD;IACF;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}